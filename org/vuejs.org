#+title: Introducción a VueJS
#+author: Patricio Martínez
#+email: maxxcan@argonauta


* Prefacio 


La mejor información la tenemos en la propia guía de la Web Oficial https://es-vuejs.github.io/vuejs.org/v2/guide/

* Qué es VueJS

VueJS es un framework progresivo de JavaScript usado para desarrollar interfaces web interactivas. Está enfocado en la parte de la vista, lo que es el front-end. Es muy fácil integrar con otros proyectos y librerías. Por otro lado, Vue también es perfectamente capaz de soportar aplicaciones sofisticadas de una sola página (SPA) cuando se utiliza en combinación con *herramientas modernas y librerías compatibles*.

** Empezando     

La manera más sencilla de probar Vue.js es haciendo un sencillo "hola mundo". Para ello vamos a crear dos ficheros uno html y otro javascript con la parte de vuejs.

Además vamos a crear un fichero package.json para poder usar el paquete npm llamado "live-server" que nos creará un servidor muy liviano para pode probar nuestra aplicación. Así que los pasos a seguir son:

Instalar live-server:

#+BEGIN_SRC shell
sudo npm install -g live-server
#+END_SRC

Y crear el fichero package.json con el comando:

#+BEGIN_SRC shell
npm init 
#+END_SRC

Una vez hecho esto añadimos al fichero package.json creado lo siguiente:

#+BEGIN_SRC npm
"scripts": {
"server": "live-server ."
}
#+END_SRC

Para ejecutarlo escribiremos:

#+BEGIN_SRC shell
npm run server
#+END_SRC



Ahora vamos a crear los dos ficheros, primero el html:

#+BEGIN_SRC html 
<!doctype html>
<html lang="es">
  <head>
    <meta charset="utf-8">
    <title>Introducción a VueJS</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/superhero/bootstrap.css">
    </head>
    <body>
      <div id="saludo">
        <h1>{{message}}</h1>
      </div>
    <script src="https://cdn.jsdelivr.net/npm/vue"></script>
    <script src="vue.js"></script>
  </body>
</html>
#+END_SRC


Y nuestro fichero javascript lo llamaremos vue.js y llevará el siguiente código:

#+BEGIN_SRC js
var vm = new Vue({
    el:'#saludo',
    data: {
        message: "Hola"
    }
});
#+END_SRC

* Características de VueJS

** Virtual DOM 

VirtualJS hace uso del Virtual DOM, el cual es usado en otros frameworks como React, Ember, etc. Los cambios no se hacen directamente en el DOM, en vez de eso una réplica del DOM es creada la cual está presente en el formulario de JavaScript de la estructura de datos. Cualquier cambio que sea hecho, se hace sobre esa estructura de datos y más tarde es comparada con la estructura original. Los cambios finales serán entonces actualizados al DOM real. Esto es bueno en términos de optimización, ya que los cambios son menos pesados y se pueden realizar más rápidos. 

**  Unión de datos 

La unión de datos (o data binding) ayuda a manipular o asignar valores a los atributos HTML, cambiar estilos, asignar clases con la ayuda de la directiva de unión llamada *v-bind* disponible en VueJS

** Componentes 

Los componentes son una importante característica de VueJS que ayuda a crear elementos propios, los cuales pueden ser reutilizados en HTML. 

** Manejador de Eventos 

*v-on* es el atributo añadido a los elementos DOM para escuchar eventos en VueJS

** Animaciones/Transiciones 
   
VueJS provee de varios mecanismos para aplicar transiciones a elementos HTML cuando ellos son añadidos o modificados o eliminados desde el DOM. VueJS tiene componentes que necesitan envolver el elemento en el que queremos que se produzca el efecto de la transición. Podemos añadir fácilmente librerías de animación de terceros y también añadir más interactividad a la interfaces. 

** Propiedades Calculadas 

Esta es una de las características más importantes de VueJS. Ayuda a escuchar los cambios hecho en los elementos de la UI y realiza los cálculos necesarios. Así, no hay necesidad de código para esto. 

** Plantillas 

VueJS provee plantillas basadas en HTML que unen el DOM con las instancias de datos de Vue. Vue compila la plantilla dentro de las funciones de renderizado del DOM virtual. Podemos hacer uso de las plantillas y sus funciones de renderizado y así podemos sustituir la plantilla con la función de renderizado. 

** Directivas 

VueJS tiene directivas como *v-if, v-else, v-on, v-bind y v-model*, las cuales son usadas para mejorar distintas acciones en el frontend. 

** Observadores 

Los observadores (watchers) están aplicados a los elementos de datos que cambian. Por ejemplo, los elementos de entrada de los formularios. 

** Encaminado 

   La navegación entre páginas es mejorada con la ayuda del vue-router. 

** Poco peso

Los scripts de VueJS son muy ligeros y su mejora es muy rápida

** Vue-cli

VueJS puede ser instalado gracias al comando en línea *vue-cli*. Éste ayuda a la construcción y compilación de una forma fácil. 

* Configurando el entorno de desarrollo para VueJS

Hay muchas formas de instalar VueJS. Algunas de esas formas las veremos más adelante

** Usando el tag <script> directamente en el fichero HTML 

#+BEGIN_SRC html
  <html>
  <head>
  <script type = "text/javascript" src = "vue.min.js"></script>
  </head>
  <body></body>
  </html>
#+END_SRC

Una vez hecho esto podemos ir a la [[https://vuejs.org/v2/guide/installation.html][página de instalación]] de VueJS  y descargarnos lo necesario. Hay dos versiones una para producción y otra para desarrollo. La versión de desarrollo no está minimizada, por otro lado la versión de producción está minimizada. 

** Usando CDN

También podemos usar el archivo VueJS desde la biblioteca de CDN. El enlace es el siguiente: 

Además también está disponible en jsDelivr y cnjs. 

** Usando NPM 

Para aplicaciones granes con VueJS es recomendable instalar el paquete npm. Éste viene con Browserify y Webpack y otras herramientas necesarias, las cuales ayudarán al desarrollo. Para instalarlo usando npm tendremos que ejecutar el siguiente comando: 

#+BEGIN_SRC bash
npm install vue
#+END_SRC

** Usando la herramienta de comandos de Vue 

VueJS también proporciona una herramienta de consola CLI para instalar vue y comenzar con la activación del servidor. Para instalar usando CLI, necesitamos tenerlo instalado con el siguiente comando: 

#+BEGIN_SRC bash
npm install -g @vue/cli-init
#+END_SRC

Ahora crearemos el proyecto con el siguiente comando:

#+BEGIN_SRC bash
vue create miproyecto
#+END_SRC

Una vez terminado el proceso usaremos los siguiente comandos:

#+BEGIN_SRC bash
cd miproyecto
npm install 
npm run dev
#+END_SRC

Una vez hecho esto abriremos el navegador e ingresando en la dirección *http://localhost:8080* obtendremos lo siguiente:



La estructura del proyecto es la siguiente:

* Introducción 

VueJS es un framework de javascript para construir interfaces de usuario. Esto hace que la parte principal esté enfocada en la capa de la vista y esto es muy fácil de entender. La versión de Vue que estamos usando ahora es la 2.0.

Como Vue es básicamente construido para desarrolladores de frontend, vamos a lidiar con muchos archivos  HTML, JavaScript y CSS. Para entender los detalles, empezaremos con un ejemplo simple.

En este ejemplo, vamos a usar la versión de desarrollo de VueJS

Ejemplo: 

#+BEGIN_SRC html
  <html>
  <head>
  <title>Introducción a VueJS</title>
  <script type="text/javascript" src="js/vue.js"></script>
  </head>
  <body>
  <div id= "intro" style ="text-align:center;">
  <h1>{{ message }}</h1>
  </div>
  <script type = "text/javascript">
  var vue_det = new Vue({
  el:'#intro',
  data: {
  message: 'MI primera tarea en VueJS'
  }
  });
  <script>
  </body>
  </html>
#+END_SRC

Esta es la primera aplicación que hemos creado usando VueJS. 

Podemos cambiar el mensaje usando la extensión de vue-devtools para firefox o Chrome

* Instancias 

Para empezar con VueJS, necesitamos crear una instancia de Vue, la cual es llamada instancia raíz.

** Sintaxis 

#+BEGIN_SRC js
  var app = new Vue({
      //opciones 
  })
#+END_SRC

Echemos un vistazo al ejemplo anterior para entender lo que necesita para ser parte del constructor Vue.

#+BEGIN_SRC html
<html>
   <head>
      <title>VueJs Instance</title>
      <script type = "text/javascript" src = "js/vue.js"></script>
   </head>
   <body>
      <div id = "vue_det">
         <h1>Firstname : {{firstname}}</h1>
         <h1>Lastname : {{lastname}}</h1>
         <h1>{{mydetails()}}</h1>
      </div>
      <script type = "text/javascript" src = "js/vue_instance.js"></script>
   </body>
</html>
#+END_SRC

Veamos el fichero vue_instance.js

#+BEGIN_SRC js
  var vm = new Vue({
      el:'#vue_det',
      data: {
          firstname : "Ria",
          lastname : "Singh",
          address  : "Mumbai"
      },
      methods: {
          mydetails: function(){
              return "I am "+this.firstname +" "+this.lastname;
          } 
      }
  })
#+END_SRC

Para VueJS hay un parámetro llamado *el*. Éste toma el id del elemento DOM. En el ejemplo anterior tenemos el id #vue_det. Está el id del elemento div el cual está presente en el fichero html. 

#+BEGIN_SRC html
<div id="vue_det"></div>
#+END_SRC

Lo siguiente es definir el objeto data. Obtener sus valores y asignarlos dentro de un div. 

#+BEGIN_SRC html
<div id = "vue_det">
   <h1>Firstname : {{firstname}}</h1>
   <h1>Lastname : {{lastname}}</h1>
</div>
#+END_SRC

También tenemos un método donde hemos definido una función que devuelve un valor. La asignaremos dentro de un div:

#+BEGIN_SRC html
<h1>{{mydetails()}}</h1>
#+END_SRC

* Plantillas 

Ahora vamos a aprender como obtener una salida en un formulario. 

Para entender esto, vamos a considerar el siguiente ejemplo:

#+BEGIN_SRC html
<html>
   <head>
      <title>VueJs Instance</title>
      <script type = "text/javascript" src = "js/vue.js"></script>
   </head>
   <body>
      <div id = "vue_det">
         <h1>Firstname : {{firstname}}</h1>
         <h1>Lastname : {{lastname}}</h1>
         <div>{{htmlcontent}}</div>
      </div>
      <script type = "text/javascript" src = "js/vue_template.js"></script>
   </body>
</html>
#+END_SRC

Fichero vue_template.js

#+BEGIN_SRC js
var vm = new Vue({
   el: '#vue_det',
   data: {
      firstname : "Ria",
      lastname  : "Singh",
      htmlcontent : "<div><h1>Vue Js Template</h1></div>"
   }
})
#+END_SRC

Con esto lo que vamos a ver en el navegador es lo siguiente:



Si vemos el contenido html está mostrado igual que la variable htmlcontent, y esto no es lo que queremos. Queremos que muestre un html adecuado en el navegador.

Para esto, usamos la directiva *v-html*. Así en el momento que asignamos la directiva v-html al elemento html, VueJS sabrá que debe mostrar contenido html bien formado. Si añadimos esa directiva notaremos el cambio.

#+BEGIN_SRC html
<html>
   <head>
      <title>VueJs Instance</title>
      <script type = "text/javascript" src = "js/vue.js"></script>
   </head>
   <body>
      <div id = "vue_det">
         <h1>Firstname : {{firstname}}</h1>
         <h1>Lastname : {{lastname}}</h1>
         <div v-html = "htmlcontent"></div>
      </div>
      <script type = "text/javascript" src = "js/vue_template.js"></script>
   </body>
</html>
#+END_SRC

Ahora, no necesitamos las dobles llaves para mostrar el contenido html. 

#+BEGIN_SRC js
var vm = new Vue({
   el: '#vue_det',
   data: {
      firstname : "Ria",
      lastname  : "Singh",
      htmlcontent : "<div><h1>Vue Js Template</h1></div>"
   }
})
#+END_SRC

* Componentes

Los componentes en VueJS es uno de las características más importantes de VueJS para crear nuestros propios elementos y poder reutilizarlos. 

Veamos el siguiente ejemplo y creemos un componente: 

Ejemplo: 

#+BEGIN_SRC html
<html>
   <head>
      <title>VueJs Instance</title>
      <script type = "text/javascript" src = "js/vue.js"></script>
   </head>
   <body>
      <div id = "component_test">
         <testcomponent></testcomponent>
      </div>
      <div id = "component_test1">
         <testcomponent></testcomponent>
      </div>
      <script type = "text/javascript" src = "js/vue_component.js"></script>
   </body>
</html>
#+END_SRC

Fichero vue_component.js 

#+BEGIN_SRC js
Vue.component('testcomponent',{
   template : '<div><h1>This is coming from component</h1></div>'
});
var vm = new Vue({
   el: '#component_test'
});
var vm1 = new Vue({
   el: '#component_test1'
});
#+END_SRC

En el fichero html, hemos creado dos div con id component_test y component_test1. En el fichero .js mostrado a continuación dos instancias son creadas con el ids de div. Hemos creado un componente común para ser usado con las dos instancias de las vistas. 

Para crear un componente, se sigue la siguiente sintaxis:

#+BEGIN_SRC js
Vue.component('nombredelcomponente',{// opciones});
#+END_SRC

Una vez que el componente es creado, el nombre del componente se convertirá en el elemento custom y el mismo puede ser usado en la instancia de Vue como elemento creado, es decir, dentro del div con el id *component_test* y *component_test1*

En el fichero js, hemos usado un componente test como el nombre del componente y el mismo nombre es usado como el elemento custom dentro de los divs.

Ejemplo 

#+BEGIN_SRC html
<div id = "component_test">
<testcomponent></testcomponent>
</div>
<div id = "component_test1">
<testcomponent></testcomponent>
</div>
#+END_SRC

En el componente creado en el fichero js, hemos añadido una plantilla la cual le asignaremos una instancia HTML como vemos en el siguiente código.

#+BEGIN_SRC js
Vue.component('testcomponent', {
template : '<div><h1>This is coming from component</h1></div>'
});
#+END_SRC

Una vez ejecutado lo veremos en el navegador.

Los componentes son dados a la etiqueta del  elemento customizado, por ejemplo, <testcomponent></testcomponent>. Sin embargo, cuando inspeccionamos el mismo en el navegador, notaremos que el tag custom en html plano presenta en la plantilla como se muestra en la siguiente captura de pantalla.

También podemos hacer componentes como una parte de la instancia de vue tal como muestra el siguiente código.

#+BEGIN_SRC js
  var vm = new Vue({
      el: '#component_test',
      components:{
          'testcomponent': {
              template : '<div><h1>This is coming from component</h1></div>'>>
          }
      }
  });
#+END_SRC

Esto es llamado *registro local* y el componente será parte de solo una instancia de vue creada. 

Así, hemos visto los componentes básico con las opciones básicas. Ahora, vamos a añadir más opciones tales como datos y métodos. Solo como una instancia de Vue tenemos datos y métodos, componentes compartidos al mismo tiempo. Por lo tanto, extenderemos el código, el cual hemos visto con datos y métodos.

Ejemplo:

#+BEGIN_SRC html
<html>
   <head>
      <title>VueJs Instance</title>
      <script type = "text/javascript" src = "js/vue.js"></script>
   </head>
   <body>
      <div id = "component_test">
         <testcomponent></testcomponent>
      </div>
      <div id = "component_test1">
         <testcomponent></testcomponent>
      </div>
      <script type = "text/javascript" src = "js/vue_component.js"></script>
   </body>
</html>
#+END_SRC

Fichero vue_component.js

#+BEGIN_SRC js
Vue.component('testcomponent',{
   template : '<div v-on:mouseover = "changename()" v-on:mouseout = "originalname();"><h1>Custom Component created by <span id = "name">{{name}}</span></h1></div>',
   data: function() {
      return {
         name : "Ria"
      }
   },
   methods:{
      changename : function() {
         this.name = "Ben";
      },
      originalname: function() {
         this.name = "Ria";
      }
   }
});
var vm = new Vue({
   el: '#component_test'
});
var vm1 = new Vue({
   el: '#component_test1'
});
#+END_SRC


* Propiedades calculadas

Ya hemos visto métodos para instancias de Vue y componentes. Las propiedades calculadas son como métodos pero con algunas diferencias en comparación a los métodos, las cuales discutiremos en adelante.

Al final, seremos capaces de tomar la decisión de usar métodos o propiedades calculadas.

Para entender a las propiedades computadas usaremos un ejemplo.

#+BEGIN_SRC html
<html>
   <head>
      <title>VueJs Instance</title>
      <script type = "text/javascript" src = "js/vue.js"></script>
   </head>
   <body>
      <div id = "computed_props">
         FirstName : <input type = "text" v-model = "firstname" /> <br/><br/>
         LastName : <input type = "text" v-model = "lastname"/> <br/><br/>
         <h1>My name is {{firstname}} {{lastname}}</h1>
         <h1>Using computed method : {{getfullname}}</h1>
      </div>
      <script type = "text/javascript" src = "js/vue_computedprops.js"></script>
   </body>
</html>
#+END_SRC
